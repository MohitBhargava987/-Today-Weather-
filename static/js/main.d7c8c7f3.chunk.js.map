{"version":3,"sources":["components/weatherapp/weather.js","components/weatherapp/temp.js","App.js","index.js"],"names":["Weather","temp","humidity","pressure","weathermood","name","speed","country","sunset","useState","weatherState","setWeatherState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7c8c7f3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst Weather = ({ \r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset, }) => {\r\n\r\n    const [weatherState, setWeatherState] = useState(\"\");\r\n\r\n\r\n    //weathermood changes here\r\n\r\n    useEffect(() => {\r\n        if (weathermood) {\r\n            switch (weathermood) {\r\n                case \"Clouds\":\r\n                    setWeatherState(\"wi-day-cloudy\");\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\":\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n                case \"Mist\":\r\n                    setWeatherState(\"wi-dust\");\r\n                    break;\r\n                case \"Rain\":\r\n                    setWeatherState(\"wi-rain\");\r\n                    break;\r\n                                \r\n\r\n                default:\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood])\r\n\r\n\r\n    //convert seconds into time\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()} : ${date.getMinutes()}`;\r\n\r\n    return (\r\n        <>\r\n            <article className=\"widget\">\r\n                <div className=\"weatherIcon\">\r\n                    <i className={`wi ${weatherState}`}></i>\r\n                </div>\r\n\r\n                <div className=\"weatherInfo\">\r\n                    <div className=\"temperature\">\r\n                        <span>{temp}&deg;</span>\r\n                    </div>\r\n\r\n                    <div className=\"description\">\r\n                        <div className=\"weatherCondition\">{weathermood}</div>\r\n                        <div className=\"place\">{name}, {country}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n\r\n                {/* the 4 column section */}\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p><i className={\"wi wi-sunset\"}></i></p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {timeStr}<br />\r\n                                Sunset\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"two-sided-section\">\r\n                            <p><i className={\"wi wi-humidity\"}></i></p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {humidity} <br />\r\n                                Humidity\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"weather-extra-info\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p><i className={\"wi wi-rain\"}></i></p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {pressure}<br />\r\n                                Pressure\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p><i className={\"wi wi-strong-wind\"}></i></p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {speed} <br />\r\n                                Speed\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather;\r\n","// api.openweathermap.org/data/2.5/weather?q=pune&appid=c9e9dbb340c61b70e5922aa0093b9312\r\n\r\nimport React, {useState,useEffect} from 'react';\r\nimport Weather from './weather';\r\nimport './style.css';\r\n\r\nconst Temp = () => {\r\n\r\n    const [searchValue, setSearchValue] = useState(\"Pune\");\r\n    const [tempInfo, setTempInfo] = useState({});\r\n\r\n    const getWeatherInfo = async () =>{\r\n        try {\r\n            let url =`https://api.openweathermap.org/data/2.5/weather?q=${searchValue}\r\n            &units=metric&appid=c9e9dbb340c61b70e5922aa0093b9312`;\r\n\r\n            let res = await fetch(url);\r\n            let data = await res.json();\r\n\r\n            const { temp, humidity, pressure } = data.main;\r\n            const { main: weathermood } = data.weather[0];\r\n            const { name } = data;\r\n            const { speed } = data.wind;\r\n            const { country, sunset } = data.sys;\r\n            \r\n            const myNewWeatherInfo = {\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weathermood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset,\r\n            };\r\n            setTempInfo(myNewWeatherInfo);\r\n\r\n            // console.log(data);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n    }, []); \r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input type=\"search\"\r\n                        placeholder=\"search...\"\r\n                        autoFocus\r\n                        id=\"search\"\r\n                        className=\"searchTerm\"\r\n                        value={searchValue}\r\n                        onChange={(e)=>setSearchValue(e.target.value)}    \r\n                    />\r\n                    <button className=\"searchButton\" onClick={getWeatherInfo}>Search</button>\r\n                </div>\r\n            </div>\r\n            {/* the term card */}\r\n            <Weather {...tempInfo}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp;\r\n","import Temp from \"./components/weatherapp/temp\";\n\nfunction App() {\n  return (\n    <>\n    <Temp />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}